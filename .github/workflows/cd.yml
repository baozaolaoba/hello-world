name: "打包和部署"

on:
  push:
    tags:
      - v*

env:
  # 容器注册中心
  CONTAINER_REGISTRY: ghcr.io
  # 镜像名,取的是仓库名
  IMAGE_NAME: ${{ github.repository }}
  # kubernetes的namespace
  NAMESPACE: hello
  # 仓库中的kubernetes部署文件名
  DEPLOY_FILE: deploy.yaml

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: "克隆代码"
        uses: actions/checkout@v3
      
      # 通过shell中的字符串截断,GITHUB_REF中获取tag
      # GITHUB_REF的内容为refs/tags/v1.0.0,#refs/*/中的#表示保留截取之后的后半段,refs/*/匹配的正好是refs/tags/
      - name: "获取tag"
        id: git-tag
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}


      # 强大的工具库,主要的用法是提取git信息,供后续action使用(特别是docker push)
      - name: "从git中获取信息,供推送image使用"
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}
          
      # docker login的固定写法
      - name: "登录github容器注册中心"
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 从Dockerfile中构建image,并推送至容器注册中心
      - name: "构建image并推送至注册中心"
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # 访问kubernetes集群的一种方式,官方方式
      - name: "kubernetes设置context"
        uses: Azure/k8s-set-context@v3.0
        with:
          # Acceptable values: generic or arc
          cluster-type: generic
          # Acceptable values: kubeconfig or service-account or service-principal
          method: kubeconfig
          # Contents of kubeconfig file
          kubeconfig: ${{ secrets.KUBECONFIG }}

      # 创建secret, 特别要注意namespace和pod要匹配,这个secret是给pod拉image时用的,具体方式是指定pod的imagePullSecrets
      - name: "创建kubernetes的secret"
        uses: Azure/k8s-create-secret@v4.0
        with:
          # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
          namespace: ${{ env.NAMESPACE }}
          # Name of the secret. You can use this secret name in the Kubernetes YAML configuration file.
          secret-name: docker-login
          # Container Registry URL
          container-registry-url: ${{ env.CONTAINER_REGISTRY }}
          # Container Registry user name
          container-registry-username: ${{ github.actor }}
          # Container Registry password
          container-registry-password: ${{ secrets.GITHUB_TOKEN }}

      # 用动态信息(image地址)替换yaml中的占位符(__IMAGE__)
      # TODO:也有一个action专门用来做替换的,需要找找, 还没找到,可以考虑自己写一个
      - name: "替换kubernetes部署配置中的占位符"
        run: |
          sed -i 's#__IMAGE__#${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git-tag.outputs.tag }}#' ${{ env.DEPLOY_FILE }}
          sed -i 's#__NAMESPACE__#${{ env.NAMESPACE }}#' ${{ env.DEPLOY_FILE }}
          
      # 部署, 和github交互的token要有写权限,默认的github.token只有读权限;另外namespace会做校验,需要和上面保持一致
      - name: "部署到k8s集群"
        uses: Azure/k8s-deploy@v4.7
        with:
          # Choose the target Kubernetes namespace. If the namespace is not provided, the commands will run in the default namespace.
          namespace: ${{ env.NAMESPACE }}
          # Path to the manifest files which will be used for deployment.
          manifests: deploy.yaml
          # Fully qualified resource URL of the image(s) to be used for substitutions on the manifest files Example: contosodemo.azurecr.io/helloworld:test
          images: ${{ env.CONTAINER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.git-tag.outputs.tag }}
          pull-images: true
          imagepullsecrets: docker-login
          # deploy, promote, or reject
          action: deploy
          # Deploy when a previous deployment already exists. If true then --force argument is added to the apply command
          force: true
          # Annotate the target namespace
          private-cluster: false
